name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: clang-11
  CXX: clang++-11

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install LLVM/Clang
      run: |
        sudo apt-get -y remove llvm clang
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main"
        sudo apt-get -q update
        sudo apt-get install -y clang-11 libclang-11-dev llvm-11 llvm-11-dev

    - name: Install libfmt 7.1.2
      run: |
        git clone -b 7.1.2 --depth 1 git://github.com/fmtlib/fmt.git
        cd fmt && mkdir build && cd build
        cmake -DFMT_TEST=OFF -DFMT_DOC=OFF ..
        cmake --build . && sudo cmake --install .

    - name: Install spdlog 1.8.1
      run: |
        git clone -b v1.8.1 --depth 1 git://github.com/gabime/spdlog.git
        cd spdlog && mkdir build && cd build
        cmake -DSPDLOG_FMT_EXTERNAL=ON ..
        cmake --build . && sudo cmake --install .

    - name: Install Microsoft.GSL 3.1.0
      run: |
        git clone -b v3.1.0 --depth 1 git://github.com/Microsoft/GSL.git
        cd GSL && mkdir build && cd build
        cmake -DGSL_TEST=OFF ..
        cmake --build . && sudo cmake --install .

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DLLVM_DIR=/usr/lib/llvm-11/cmake

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
